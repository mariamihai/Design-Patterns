Abstract Factory Design Pattern - About

INTENT
- provide an interface for creating families of related or dependent objects without specifying their concrete classes
- a hierarchy that encapsulates many possible "platforms" and the construction of a suite of "products"
- the new operator considered harmful

PROBLEM
The portability of an application.

DISCUSSION
Provide a level of indirection that abstracts the creation of families of related or dependent objects without directly specifying their concrete classes. The "factory" object has the responsibility
for providing creation services for the entire platform family. Clients never create platform objects directly, they ask the factory to do that for them.
This mechanism makes exchanging product families easy because the specific class of the factory object appears only once in the application - where it is instantiated. The application can wholesale replace
the entire family of products simply by instantiating a different concrete instance of the abstract factory.
Because the service provided by the factory object is so pervasive, it is routinely implemented as a Singleton.
The Abstract Factory defines a F.M. per product. Each F.M. encapsulates the NEW operator and the concrete, platform-specific, product classes. Each "platform" is then modeled with a Factory derived class.

The purpose of the Abstract Factory is to provide an interface for creating families of related objects, without specifying concrete classes.

EXAMPLE
- the sheet metal stamping equipment used in the manufacture of Japanese automobiles. The stamping equipment is an A.F. which creates auto body parts. The same machinery is used to stamp right hand doors, 
left hand doors, right front fenders, etc. Through the use of rollers to change the stamping dies, the concrete classes produced by the machinery can be changed within a few minutes.

CHECK LIST
- decide if "platform independence" and creation services are the current source of pain.
- map out a matrix of "platforms" vs "products"
- define a factory interface that consists of a factory method per product
- define a factory derived class for each platform that encapsulates all references to the NEW operator
- the client should retire all references to NEW and use the factory methods to create the product objects


RULES OF THUMB
- A.F. might store a set of Prototypes from which to clone and return product objects.
- A.F., Builder and Prototype define a factory object that's responsible for knowing and creating the class of product objects and make it a parameter of the system. A.F. has the factory object producing 
objects of several classes. Builder has the factory object building a complex product incrementally using a correspondingly complex protocol. Prototype has the factory object (aka prototype) building a product 
by copying a prototype object.
- A.F. classes are often implemented with F.M. but they can also be implemented using Prototype.
- A.F. can be used as an alternative to Facade to hide platform-specific classes.