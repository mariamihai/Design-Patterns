Object Pool Design Pattern - About

INTENT
- performance boost
- most effective in situations where the cost of initializing a class instance is high, the rate of instantiation of a class is high and the number of instantiations in use 
at any one time is low

PROBLEM
Object pools (resource pools) are used to manage the object caching. The client asks for an object that has been instantiated already, instead of creating a new object.
It is desirable to keep all Reusable objects that are not currently in use in the same object pool so that they caan be managed by one coherent policy. To achieve this, 
the Reusable Pool class is designed to be a singleton class.

DISCUSSION
The Object Pool lets others "check out" objects from its pool, when those objects are no longer needed by their processes, they are returned to the pool in order to be reused.
As we don't want a process to have to wait for a particular object to be released, the Object Pool also instantiates new objects as they are required, but must also implement 
a facility to clean up unused objects periodically.

The general idea for the pattern is that if instances of a class can be reused, you avoid creating instances of the class by reusing them.
Reusable - the object in the pool
ReusablePool - instances of this class manage Reusable objects (singleton class)
Client - instances of this class use Reusable objects.

The client calls acquireReusable method when it needs a Reusable object.
If the pool contains Reusable objects, then it removes an object from the pool and returns it. If the pool is empty, then the method creates a Reusable object (if it can).
If the method cannot create a new Reusable object then it waits until a Reusable object is returned to the collection.
The client object passes a Reusable object to the releaseReusable method when they are finished with the object.
ReusablePool might limit the number of Reusable objects in use.

EXAMPLE

CHECK LIST
- create ObjectPool class with private array of Objects inside
- create acquire and release methods in ObjectPool class
- make sure that the ObjectPool is a Singleton

RULES OF THUMB
- Object Pools are usually implemented as SIngletons
- The F.M. pattern can be used to encapsulate the creation logic for objects. However, it does not manage them after their creation, the object pool pattern keeps track 
of the objects it creates.
